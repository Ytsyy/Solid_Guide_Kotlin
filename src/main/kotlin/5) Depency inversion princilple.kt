class `5)Depency inversion principle` {
/*

    Оригинальня формулировка:
    Depend on abstractions, not on concretions.

    Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций
    Или
    Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций

    Этот принцип гласит, что класс не должен смешиваться с инструментом, который он использует для выполнения действия.
    Скорее, он должен быть объединен с интерфейсом, который позволит инструменту соединиться с классом.

    Объяснение:
    Меняя деталь в механизме, мы расчитываем что механизм будет работать точно так же. Если же его поведение меняется
    это нарушение принципа.

    Простое объяснение:
    Если меняя сломанную деталь в станке для него теперь необходимо другое напряжение и новый инструктаж для работников
    это нарушение данного принципа.
    Для решения этой проблемы должны вводится новые абстракции между сущностями - между станком и электрическом мы
    вводим трансформатор который сам подбирает необходимое напряжение. В случае станка и работников - мы вводим пульт
    управления, люди учаться работать именно с ним, а он в свою очередь сам решает как исполнять введенные команды на
    станке.

    Пример:
    Класс User зависит от SMSNotification. В данном случае нет промежуточной абстракции и могут возникнуть проблемы
    с тестированием и расширением данного класса.
    Поэтому необходимо создать промежуточную абстракцию интерфейс Notification, которая бы принимала объект
    notification_service.
    Благодаря этому мы можем безопаснее связывать классы user и SMSNotification или  EmailSender.
 */
}
